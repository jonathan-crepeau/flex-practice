/* SECTION - Universal Selector */

* {
    padding: 0;
    margin: 0;
}

/* SECTION - display: inline-block */
/* NOTE - When child elements' display property is set to a value of inline-block or inline, an automatic margin appears. This can be resolved with flexbox styling, otherwise I've found it's easiest to use a negative margin to remove it: */

/* #parent-element {
    background: lightblue;
    width: 600px;
    height: 600px;
}


.child-element {
    background-color: peachpuff;
    outline: black solid 1px;
    width: 200px;
    height: 50px;
    display: inline-block;
    margin: 0 -2px;
} */



/* SECTION Flexbox - Parent Container Propreties */

/* NOTE - 'gap' property applies minimum gutter to both column and gap orientation. Versus, 'row-gap' and 'column-gap' only impact one of those, respectively, depending on how the flex-direction is set. */

/* #parent-element {
    background-color: lightskyblue;
    width: 100vw;
    height: 100vh;
    margin: auto;
    display: flex;
    flex-flow: row wrap;
    justify-content: space-around;
    align-items: center;
}

.child-element {
    background-color: brown;
    outline: white solid 1px;
    width: 200px;
    height: 200px;
    /* NOTE - Percentages as values for a flex container's children allows more accomodation of differing screen sizes / device sizes. */
    /* width: 50%; 
} */



/* SECTION Flexbox: Children Properties */

/* #parent-element {
    background-color: lightpink;
    height: 100vh;
    width: 100vw;
    display: flex;
    flex-flow: row wrap;
    justify-content: space-around;
    align-items: center;
}

.child-element {
    background-color: grey;
    height: 100px;
    width: 100px;
    outline: black 1px solid;
    padding: 10px;
}

.odd-duck {
    order: -1;
} */



/* ANCHOR - Position Property */

/* main {
    height: 300vh;
}

#parent-element {
    position: relative;
}

.child-element {
    background-color: lightblue;
    height: 40px;
    outline: black 1px dashed;
} */

/* NOTE - "Specificity Within the Cascade". If two classes are applied -- such as the case with the declaration above and below -- the second class will override the first. That is why the .odd-duck class declaration will only be applied to the child elements with said class if place below the .child-element class declaration (above). Also, see the !important CSS override, but be very sparing in its use.  */

/* .odd-duck {
    background-color: yellow ;
    position: absolute;
    top: 40px;
    left: 20px;
}

#sticky-item {
    background-color: yellow;
    height: 40px;
    position: sticky;
    top: 100px;
    left: 20px;
    z-index: 2;
} */